# This workflow will build and push a Java application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-java?tabs=javase&pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the JAVA_VERSION environment variable below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: FlowerShop CD to Azure Web App

env:
  AZURE_WEBAPP_NAME: 'pw-flowershop'  # set this to the name of your Azure Web App
  JAVA_VERSION: '17'                  # set this to the Java version to use
  DISTRIBUTION: 'corretto'            # set this to the Java distribution
  NODE_VERSION: '18.x'                # set this to the node version to use

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: ‚òÅÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üîß Set up Java version
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRIBUTION }}
          cache: 'maven'

      - name: üî® Build with Maven
        run: mvn clean install
        working-directory: ./FlowerShopBackend/
        
      - name: üì¶ Upload backend artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: java-app
          path: '${{ github.workspace }}/FlowerShopBackend/target/*.jar'
        
      - name: üîß Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: flower-shop-frontend/package-lock.json

      - name: üî® npm install, build, and test
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present
        working-directory: ./flower-shop-frontend/
        
      - name: üì¶ Upload frontend artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: react-app
          path: '${{ github.workspace }}/flower-shop-frontend/build'

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: üì¶ Download backend artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: java-app
          
      - name: üì¶ Download frontend artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: react-app
          path: 'public'

      - name: ‚òÅÔ∏è Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: '.'
